#!/usr/bin/python2.6

import json
import optparse
import os
import sys

from os.path import abspath, exists, join
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile


os.environ['QA_SKIP_BUILD_ROOT'] = '1'


def build_rpm(spec_file):
    Popen(["/usr/bin/rpmbuild", "-ba", spec_file]).communicate()


def npm2rpm(package):
    spec_file = NamedTemporaryFile(suffix='.spec')
    def get_npm(key):
        p = Popen(["/usr/bin/npm", "view", package, key], stdout=PIPE)
        val = p.communicate()[0].strip()
        if not val:
            return "Not specified"

        return val

    def get_package(key):
        d = json.load(open(join(package, "package.json")))
        return d.get(key, "Not specified")
        

    if exists(join(package, "package.json")):
        get_info = get_package
        location = abspath(package)
    else:
        location = package
        get_info = get_npm

    pkg_info = dict((k, get_info(k)) for k in ('name',
                                               'description',
                                               'license',
                                               'license.type',
                                               'version'))
    pkg_info['location'] = location

    if pkg_info['license.type']:
        pkg_info['license'] = pkg_info['license.type']

    try:
        pkg_info['license'] = pkg_info['license']['type']
    except TypeError:
        pass
    except KeyError:
        pkg_info['license'] = ""

    spec = """
Name:   nodejs-{name}
Version:    {version}
Release:    1%{{?dist}}
Summary:    {description}

AutoReqProv: no
Requires: nodejs
Group:  Development/Libraries
License: {license}

BuildRoot:  %(mktemp -ud %{{_tmppath}}/%{{name}}-%{{version}}-%{{release}}-XXXXXX)

%description
{description}


%install
rm -rf %{{buildroot}}
mkdir -p %{{buildroot}}/%{{_prefix}}
npm -g --prefix %{{buildroot}}/%{{_prefix}} install {location}

%clean
rm -rf %{{buildroot}}

%files
%defattr(-,root,root,-)
/*
""".format(**pkg_info)

    spec_file.write(spec)
    spec_file.flush()
    build_rpm(spec_file.name)
    spec_file.close()

if __name__ == "__main__":
    parser = optparse.OptionParser(usage="npm2rpm <package>")
    (options, args) = parser.parse_args()
    
    if len(args) != 1:
        parser.error("Need <package> argument.")

    npm2rpm(args[0])
